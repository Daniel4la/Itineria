//
//  OpenAI.swift
//  ChatGPTChat
//  This code is taken from LiamRMIT made on 26/9/2023
//

import Foundation

/// A model representing a chat message exchanged in the conversation.
///
/// `ChatMessage` holds details about an individual message, including its content, sender, and timestamp.
/// It is used to represent both user and system messages within the chat interface.
///
/// ## Properties
/// - `id`: A unique identifier for the message.
/// - `content`: The actual content of the message.
/// - `createdAt`: The date and time when the message was created.
/// - `sender`: The sender of the message, which can be either the user or the system.
struct ChatMessage {
    let id: String
    let content: String
    let createdAt: Date
    let sender: MessageSender
}
/// An enumeration representing the sender of a message in a chat.
///
/// The `MessageSender` enum differentiates between the user and system (e.g., ChatGPT) as the message sender.
///
/// ## Cases
/// - `user`: The message is sent by the user.
/// - `system`: The message is sent by the system, typically ChatGPT.

enum MessageSender {
    case user
    case system
}
/// A structure representing the body of a request sent to the OpenAI API.
///
/// The `OpenAIChatBody` is used to encode the data that will be sent to OpenAI's chat model API.
/// It specifies the model and the messages exchanged so far in the conversation.
///
/// ## Properties
/// - `model`: The name of the OpenAI model (e.g., "gpt-3.5-turbo") being used for the chat.
/// - `messages`: An array of `Message` objects representing the conversation history sent to the API.
///
/// ## Example Usage
/// ```swift
/// let body = OpenAIChatBody(model: "gpt-3.5-turbo", messages: [Message(role: "user", content: "Hello!")])
/// ```
struct OpenAIChatBody: Encodable {
    let model: String
    let messages: [Message]
}
/// A structure representing the result returned by the OpenAI API after sending a chat request.
///
/// `OpenAIResult` contains detailed information about the API response, including the chat response (choices), metadata (usage), and the model used.
///
/// ## Properties
/// - `id`: A unique identifier for the response.
/// - `object`: The type of the returned object (typically "chat.completion").
/// - `created`: The timestamp for when the response was generated.
/// - `model`: The name of the model used in the response.
/// - `choices`: An array of `Choice` objects, representing the different possible responses from the model.
/// - `usage`: A `Usage` object detailing the token consumption of the request.
///
/// ## Example Usage
/// ```swift
/// let result = OpenAIResult(id: "response-id", object: "chat.completion", created: 1638747362, model: "gpt-3.5-turbo", choices: [], usage: Usage(promptTokens: 10, completionTokens: 15, totalTokens: 25))
/// ```
struct OpenAIResult: Codable {
    let id, object: String
    let created: Int
    let model: String
    let choices: [Choice]
    let usage: Usage
}
/// A structure representing a choice (response) from the OpenAI chat model.
///
/// Each `Choice` object contains a message generated by the model as well as metadata about how the response was produced.
///
/// ## Properties
/// - `index`: The index of the choice in the array of possible responses.
/// - `message`: A `Message` object representing the content of the model's response.
/// - `finishReason`: A string explaining why the message generation finished (e.g., "stop" when the model completes naturally).
///
/// ## Coding Keys
/// Custom coding keys are used to handle the snake_case to camelCase mapping for the `finishReason` property.
///
struct Choice: Codable {
    let index: Int
    let message: Message
    let finishReason: String

    enum CodingKeys: String, CodingKey {
        case index, message
        case finishReason = "finish_reason"
    }
}
/// A structure representing a message exchanged between the user and the system.
///
/// `Message` is a model that holds the role of the speaker (either "user" or "system") and the message content.
///
/// ## Properties
/// - `role`: The role of the speaker in the conversation ("user" or "system").
/// - `content`: The actual content of the message.
///
/// ## Example Usage
/// ```swift
/// let message = Message(role: "user", content: "Hello, how are you?")
/// ```
struct Message: Codable {
    let role, content: String
}
/// A structure representing the usage statistics of an OpenAI API call.
///
/// `Usage` provides information on how many tokens were used in the request, including prompt tokens (user input),
/// completion tokens (the generated response), and the total tokens used.
///
/// ## Properties
/// - `promptTokens`: The number of tokens used in the prompt (user input).
/// - `completionTokens`: The number of tokens used in the completion (model response).
/// - `totalTokens`: The total number of tokens consumed by the request.
///
/// ## Example Usage
/// ```swift
/// let usage = Usage(promptTokens: 10, completionTokens: 15, totalTokens: 25)
/// ```
struct Usage: Codable {
    let promptTokens, completionTokens, totalTokens: Int

    enum CodingKeys: String, CodingKey {
        case promptTokens = "prompt_tokens"
        case completionTokens = "completion_tokens"
        case totalTokens = "total_tokens"
    }
}
